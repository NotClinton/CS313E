"""
Student information for this assignment:

Replace <FULL NAME> with your name.
On my honor, Ifeanyichukwu Anyasinti, this
programming assignment is my own work and I have not provided this code to
any other student.

I have read and understand the course syllabus's guidelines regarding Academic
Integrity. I understand that if I violate the Academic Integrity policy (e.g.
copy code from someone else, have the code generated by an LLM, or give my
code to someone else), the case shall be submitted to the Office of the Dean of
Students. Academic penalties up to and including an F in the course are likely.

UT EID 1: ica368
"""

from abc import ABC, abstractmethod
import random

DAILY_EXPENSE = 60
HAPPINESS_THRESHOLD = 50
MANAGER_BONUS = 1000
TEMP_EMPLOYEE_PERFORMANCE_THRESHOLD = 50
PERM_EMPLOYEE_PERFORMANCE_THRESHOLD = 25
RELATIONSHIP_THRESHOLD = 10
INITIAL_PERFORMANCE = 75
INITIAL_HAPPINESS = 50
PERCENTAGE_MAX = 100
PERCENTAGE_MIN = 0
SALARY_ERROR_MESSAGE = "Salary must be non-negative."


# TODO: implement this class. You may delete this comment when you are done.
class Employee(ABC):
    """
    Abstract base class representing a generic employee in the system.
    """

    def __init__(self, name, manager, salary, savings):
        self.relationships = {}
        self.savings = savings
        self.is_employed = True
        self.__name = name
        self.__manager = manager
        self.performance = INITIAL_PERFORMANCE
        self.happiness = INITIAL_HAPPINESS
        self.salary = salary

    @property
    def name(self):
        "name getter"
        return self.__name

    @property
    def manager(self):
        "manager getter"
        return self.__manager

    @property
    def performance(self):
        "performance getter"
        return self._performance

    @performance.setter
    def performance(self, value):
        "performance setter"
        if value > 100:
            self._performance = 100
        elif value < 0:
            self._performance = 0
        else:
            self._performance = value

    @property
    def happiness(self):
        "happiness getter"
        return self._happiness

    @happiness.setter
    def happiness(self, value):
        "happiness setter"
        if value > 100:
            self._happiness = 100
        elif value < 0:
            self._happiness = 0
        else:
            self._happiness = value

    @property
    def salary(self):
        "salary getter"
        return self._salary

    @salary.setter
    def salary(self, value):
        "salary setter"
        if value < 0:
            raise ValueError("Salaries must always be non-negative")
        else:
            self._salary = value

    @abstractmethod
    def work(self):
        "work abstract method"

    def interact(self, employee):
        "method for employee interaction"
        if employee not in self.relationships:
            self.relationships[employee.name] = 1
        elif self.relationships[employee.name] >= RELATIONSHIP_THRESHOLD:
            self.happiness += 1
        elif self.happiness >= HAPPINESS_THRESHOLD and employee.happiness >= HAPPINESS_THRESHOLD:
            self.relationships[employee.name] += 1
        else:
            self.relationships[employee.name] -= 1
            self.happiness -= 1

    def daily_expense(self):
        "method for daily expense"
        self.happiness -= 1
        self.savings -= DAILY_EXPENSE

    def __str__(self):
        return (f"{self.name}\n"
                f"\tSalary: ${self.salary}\n"
                f"\tSavings: ${self.savings}\n"
                f"\tHappiness: {self.happiness}%\n"
                f"\tPerformance: {self.performance}%")





# TODO: implement this class. You may delete this comment when you are done.
class Manager(Employee):
    """
    A subclass of Employee representing a manager.
    """
    def work(self):
        "manager work method"
        change = random.randrange(-5,6,1)
        self.performance += change

        if change < 0 or change == 0:
            self.happiness -= 1
            for relationship in self.relationships:
                self.relationships[relationship] -= 1
        else:
            self.happiness += 1


# TODO: implement this class. You may delete this comment when you are done.
class TemporaryEmployee(Employee):
    """
    A subclass of Employee representing a temporary employee.
    """
    def work(self):
        "Temp employee work method"
        change = random.randrange(-15,16,1)
        self.performance += change

        if change <=    0:
            self.happiness -= 2
        else:
            self.happiness += 1

    def interact(self, employee):
        "method for temp employee interaction"
        super(TemporaryEmployee, self).interact(employee)
        if self.manager == employee:
            if employee.happiness > HAPPINESS_THRESHOLD and self.performance >= TEMP_EMPLOYEE_PERFORMANCE_THRESHOLD:
                self.savings += MANAGER_BONUS
            elif employee.happiness <= HAPPINESS_THRESHOLD:
                self.salary //= 2
                self.happiness -= 5
        if self.salary == 0:
            self.is_employed = False

# TODO: implement this class. You may delete this comment when you are done.
class PermanentEmployee(Employee):
    """
    A subclass of Employee representing a permanent employee.
    """
    def work(self):
        "permanent employee work method"
        change = random.randrange(-10,11,1)
        self.performance += change

        if change >= 0:
            self.happiness += 1

    def interact(self, employee):
        "permanent employee work method"
        super(PermanentEmployee, self).interact(employee)

        if self.manager == employee:
            if employee.happiness > HAPPINESS_THRESHOLD and self.performance >= PERM_EMPLOYEE_PERFORMANCE_THRESHOLD:
                self.savings += MANAGER_BONUS
            elif employee.happiness <= HAPPINESS_THRESHOLD:
                self.happiness -= 1